一、Spring对数据库访问技术提供的支持
	1、针对不同的数据库访问技术，Spring提供
		了统一的编程模式。
		实际上所有的DAO都可以继承自DaoSupport。
		1）JDBC
			--DAO组件继承于JdbcDaoSupport
			--DAO通过父类提供的组件JdbcTemplate
				来实现增、删、改、查。
		2）Hibernate
			--DAO组件继承于HibernateDaoSupport
			--DAO通过父类提供的组件HibernateTemplate
				来实现增、删、改、查。
	2、针对不同的数据库访问技术，Spring统一了
		数据库访问的异常类型。
		Spring将数据库访问的异常信息，统一成
		DataAccessException
	3、Spring提供了声明式事务管理。
		Spring提供了声明式事务管理，即只需要进行配置，
		就可以实现组件的事务管理。
		实际上Spring是采用AOP来实现这一点的。

*二、在Spring中使用JDBC
	1、使用步骤（XML配置）
		1）导包
			--jdbc驱动包
			--连接池驱动包
		2）配置数据源
			--在applicationContext.xml中配置
				数据源DataSource。
			--在数据源的配置上，配置好连接池。
		3）创建实体类
		4）创建DAO接口及实现类
			--实现类需要继承于JdbcDaoSupport
			--在实现类中使用JdbcTemplate来进行
				增、删、改、查。
		5）声明DAO组件
			--在applocationContext.xml中声明DAO组件
			--需要将DataSource注入给DAO，实际上
				是注入到父类JdbcDaoSupport的
				setDataSource方法。
	2、使用步骤（注解）
		1）1-4步与XML配置一致
		2）开启组件扫描
			在applicationContext.xml中开启组件扫描
		3）声明DAO组件
			在类上使用注解声明
		4）注入数据源
			使用注解给DAO组件注入数据源
			@Resource
			public void setDS(DataSource ds) {
				super.setDataSource(ds);
			}

*三、在Spring中使用Hibernate
	1、使用步骤（XML配置）
		1）导包
			--jdbc驱动包
			--连接池驱动包
			--hibernate开发包
		2）配置数据源和SessionFactory
			--在applicationContext.xml中配置DataSource，
				并在其中设置连接池的参数
			--配置SessionFactory，依赖DataSource，
				同时配置Hibernate框架参数及依赖的
				映射关系文件。
				注：在Spring中使用Hibernate，hibernate的
					主配置文件可以省略，其内容体现在当前
					SessionFactory的配置下。
		3）创建实体类及映射关系文件
		4）创建接口及实现类
			--实现类要继承于HibernateDaoSupport
			--使用HibernateTemplate进行增、删、改、查
		5）声明DAO组件
			--在applicationContext.xml中声明DAO组件
			--DAO组件依赖SessionFactory
	2、使用步骤（注解配置）
		1）1-4步同上
		2）开启组件扫描
			在applicationContext.xml中开启组件扫描。
		3）声明组件
			在DAO类上，使用注解声明组件
		4）注入SessionFactory
			@Resource
			public void setSF(SessionFactory sf) {
				super.setSessionFactory(sf);
			}

*四、Spring事务管理
	1、管理业务组件的事务，即将业务组件中的一套
		完整业务流程控制在一个事务范围之内。
		public class XxxAction {
		
			//这个完整的业务流程应该在一个事务之内
			public String execute() {
				costDao.save(cost);
				accountDao.update(account);
				serviceDao.delete(service);
				return "success";
			}
			
		}
	2、Spring管理事务的方式
		1）编程式事务
			需要编写代码来实现事务的控制。
			优点：控制的粒度细、精确，效率高。
			缺点：不方便
			public void save() {
				try {
				   mDao.find();
				   nDao.query();
				   //开启事务
					aDao.save();
					bDao.save();
					cDao.save();
					//提交事务
					uDao.find();
					pDao.find();
				} catch(Exception e) {
					//回滚
				} finally {
					//关闭
				}
			}
		2）声明式事务（*）
			只需要进行配置就可以实现事务的控制，
			并且只需要配置一次即可。
			优点：极其方便
			缺点：只能控制到某方法，不能够更细，
				效率略低。
	3、声明式事务
		1）application|Context.xml中配置事务
			<!-- 声明式事务管理,采用AOP形式切入 -->
			<!-- 
				声明事务控制的方面组件，该组件Spring预置了
				jdbc：org.springframework.jdbc.datasource.DataSourceTransactionManager
				hibernate：org.springframework.orm.hibernate3.HibernateTransactionManager
			-->
			<bean id="txManager"
				class="org.springframework.orm.hibernate3.HibernateTransactionManager">
				<!-- 如果是jdbc需要注入DataSource，
					如果是Hibernate需要注入SessionFactory。 -->
				<property name="sessionFactory" ref="sessionFactory" />
			</bean>
			<!-- 声明通知和方面组件 -->
			<!-- 通常情况下，DML方法用propagation="REQUIRED"，
				表示开启事务。查询方法用read-only="true"，
				表示不支持事务，效率更高。 -->
			<tx:advice id="txAdvice" transaction-manager="txManager">
				<tx:attributes>
					<tx:method name="update*" propagation="REQUIRED" />
					<tx:method name="delete*" propagation="REQUIRED" />
					<tx:method name="add*" propagation="REQUIRED" />
					<tx:method name="load*" read-only="true" />
					<tx:method name="execute" propagation="REQUIRED" />
				</tx:attributes>
			</tx:advice>
			<aop:config proxy-target-class="true">
				<aop:advisor advice-ref="txAdvice" pointcut="within(com.tarena.action.*)" />
			</aop:config>			
		2）通过注解配置事务


补充：
	什么时候用注解，什么时候用配置？
	1、AOP最好用配置
	2、bean的声明可以用注解