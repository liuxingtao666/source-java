一、AOP介绍
	1、什么是AOP
		Aspect Oriented Programming，面向方面/切面
		编程，指的是针对一批组件的通用业务逻辑进行
		编程。
		方面：指的是多个组件的共性，即AOP解决的是
			针对这些共性编程的问题。Spring AOP提供可
			配置的方式，将通用逻辑的实现独立出来，灵活
			的作用到任何一个组件的方法中。
	2、AOP的作用
		针对任意一批组件的共性进行编程，Spring可以把
		这些共性在一个独立的组件中实现，然后通过配置
		将这个实现作用到其他组件上去。
		优点：
			--实现通用逻辑的组件与业务组件没有直接关系，
				耦合度低，便于实现业务逻辑组件的复用
			--实现业务逻辑组件作用到哪些组件上，是在
				配置文件中配置实现的，很灵活容易替换
		OOP与AOP的关系
			OOP是面向对象编程，侧重点在于对象，它是
			AOP的基础；
			AOP是面向方面编程，侧重点在于方面（对象的
			共性），主要改善对象的关系。
	3、AOP的相关概念
		1）方面（Aspect）
			是解决通用业务逻辑的组件，就是一个bean。
			该bean独立存在，不与任何业务组件发生直接
			的关系。
		2）切入点（Pointcut）
			用于指定方面组件给哪个组件的哪个方法使用，
			Spring使用表达式来实现切入点的声明。
		3）通知（Advice）
			a、用于指定方面组件在目标方法的哪个位置调用。
			b、通知类型
				--前置通知<aop:before>
				--后置通知<aop:after-returning>
				--最终通知<aop:after>
				--异常通知<aop:after-throwing>
				--环绕通知<aop:around>
			c、方面组件调用的位置
				try {
					//前置通知<aop:before>
					//环绕通知-前置部分<aop:around>
					//目标组件
					//环绕通知-后置部分
					//后置通知<aop:after-returning>
				} catch(Exception e) {
					//异常通知<aop:after-throwing>
				} finally {
					//最终通知<aop:after>
				}

*二、AOP的使用
	1、AOP的使用步骤
		1）创建方面组件
		2）在applicationContext.xml中声明方面组件
		3）引用方面组件
			<aop:config>
				<!-- 声明方面，引用方面组件 -->
				<aop:aspect ref="方面组件id">
					<!-- 
						指定方面组件被谁引用，即
						声明切入点和通知类型。
					 -->
					 <aop:after method="方面组件的方法名"
					 		pointcut="表达式"/>
				</aop:aspect>
			</aop:config>
			注：通知类型对方面组件的方法有要求
				--before,after-returning,after
					public void xxx() {
						
					}
				--around
					public Object xxx(ProceedingJoinPoint p) {
						//参数可以获取目标组件的实例
						
					}
				--after-throwing
					public void xxx(Exception e) {
						//参数是业务组件中抛出的异常
						
					}
	2、切入点表达式
		1）匹配类的表达式
			用于指定哪些类的方法启用方面组件，
			语法格式within(类型)
			--匹配AddCostAction类中的所有方法
				within(com.tarena.action.AddCostAction)
			--匹配com.tarena.action包下所有类的所有方法
				within(com.tarena.action.*)
			--匹配com.tarena包及其子包下所有类的所有方法
				within(com.tarena..*)
		2）匹配方法的表达式
			用于指定哪些类的哪些方法引用方面组件，
			语法格式execution(修饰符? 返回类型 
				方法名(参数列表) throws异常?)
			--匹配所有类中的delete方法
				execution(* delete(..))
			--匹配JdbcCostDao中的delete方法
				execution(
				  * com.tarena.dao.JdbcCostDao.delete(..))
			--匹配JdbcCostDao中所有的方法
				execution(
				  * com.tarena.dao.JdbcCostDao.*(..))
			--匹配com.tarena.dao包下所有类的所有方法
				execution(* com.tarena.dao.*.*(..))
			--匹配com.tarena包及其子包下所有类的所有方法
				execution(* com.tarena..*.*(..))
		3）匹配bean的表达式
			用于指定哪个bean启用方面组件，
			语法格式bean(id)
			--匹配id="costDao"的bean的所有方法
				bean(costDao)
			--匹配所有后缀为Dao的bean的所有方法
				bean(*Dao)
		4）匹配参数的表达式
			用于指定具有哪种参数的方法启用方面组件，
			语法格式args(参数)
			--匹配参数为String的所有方法
				args(java.lang.String)
	3、使用注解实现AOP
		1）开启组件扫描
		2）开启AOP的注解配置
			<aop:aspectj-autoproxy
					proxy-target-class="true"/>
		3）使用注解配置
			a、使用注解声明方面组件
				在类上使用@Aspect来声明该组件是
				一个方面组件。
			b、使用注解声明切入点和通知
				需要在方法上通过注解声明切入点和通知类型。
				--前置通知
					@Before("within(com.tarena..*)")
				--后置通知
					@AfterReturning("within(com.tarena..*)")
				--最终通知
					@After("within(com.tarena..*)")
				--环绕通知
					@Around("within(com.tarena..*)")
				--异常通知
					@AfterThrowing(pointcut="within(com.tarena..*)",throwing="e")

三、AOP的实现原理


补充Log4j
	1、是Apache推出的一个用于记录日志的组件，
		它主要包含3部分：
		1）日志器（Logger）
			用于记录各种级别的日志，提供了产生
			各种级别日志的方法。
		2）输出器（Appender）
			用于将日志信息输出到不同的文件中，
			如HTML，txt，log，控制台
		3）布局器（Layout）
			提供各种格式化方案
	2、使用步骤
		1）导包
		2）引入配置文件
			--放于src下
			--名称为log4j.properties
		3）使用API来记录日志
			Logger logger = 
					Logger.getLogger(Class);
			logger.warn("信息");
	3、日志级别
		调试级
		普通级
		警告级
		错误级
		致命级
		这些级别从上至下按顺序是由低到高。
		假设当前配置级别为警告级，那么Log4j输出的
		内容将包含警告级、错误级、致命级。