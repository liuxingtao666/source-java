一、AOP介绍
	1、什么是AOP
		Aspect Oriented Programming，面向方面/切面
		编程，指的是针对一批组件的通用业务逻辑进行
		编程。
		方面：指的是多个组件的共性，即AOP解决的是
			针对这些共性编程的问题。Spring AOP提供可
			配置的方式，将通用逻辑的实现独立出来，灵活
			的作用到任何一个组件的方法中。
	2、AOP的作用
		针对任意一批组件的共性进行编程，Spring可以把
		这些共性在一个独立的组件中实现，然后通过配置
		将这个实现作用到其他组件上去。
		优点：
			--实现通用逻辑的组件与业务组件没有直接关系，
				耦合度低，便于实现业务逻辑组件的复用
			--实现业务逻辑组件作用到哪些组件上，是在
				配置文件中配置实现的，很灵活容易替换
		OOP与AOP的关系
			OOP是面向对象编程，侧重点在于对象，它是
			AOP的基础；
			AOP是面向方面编程，侧重点在于方面（对象的
			共性），主要改善对象的关系。
	3、AOP的相关概念
		1）方面（Aspect）
			是解决通用业务逻辑的组件，就是一个bean。
			该bean独立存在，不与任何业务组件发生直接
			的关系。
		2）切入点（Pointcut）
			用于指定方面组件给哪个组件的哪个方法使用，
			Spring使用表达式来实现切入点的声明。
		3）通知（Advice）
			a、用于指定方面组件在目标方法的哪个位置调用。
			b、通知类型
				--前置通知<aop:before>
				--后置通知<aop:after-returning>
				--最终通知<aop:after>
				--异常通知<aop:after-throwing>
				--环绕通知<aop:around>
			c、方面组件调用的位置
				try {
					//前置通知<aop:before>
					//环绕通知-前置部分<aop:around>
					//目标组件
					//环绕通知-后置部分
					//后置通知<aop:after-returning>
				} catch(Exception e) {
					//异常通知<aop:after-throwing>
				} finally {
					//最终通知<aop:after>
				}

*二、AOP的使用
	1、AOP的使用步骤
		1）创建方面组件
		2）在applicationContext.xml中声明方面组件
		3）引用方面组件
			<aop:config>
				<!-- 声明方面，引用方面组件 -->
				<aop:aspect ref="方面组件id">
					<!-- 
						指定方面组件被谁引用，即
						声明切入点和通知类型。
					 -->
					 <aop:after method="方面组件的方法名"
					 		pointcut="表达式"/>
				</aop:aspect>
			</aop:config>

三、AOP的实现原理
