一、UI标签
	1、作用
		1）生成框体
		2）给框体赋默认值
	2、简单的UI标签
		1）表单标签
		*2）文本框
		3）密码框
		4）文本域标签
		*5）布尔框标签
	3、复杂的UI标签
		*1）单选框标签
			a、静态初始化
			b、动态初始化
		2）多选框标签
			a、静态初始化
			b、动态初始化
		3）下拉选标签
			a、静态初始化
			b、动态初始化
			
二、拦截器
	1、拦截器的作用
		是Struts2中用于扩展Action的组件，常用于处理
		Action的通用业务逻辑，比如记录日志、权限检查、
		控制事务等。
		实际上，拦截器可以拦截对Action的请求，在拦截
		之前及之后，都可以追加一些业务逻辑，用这样的
		方式来扩展Action。
	2、拦截器的使用步骤
		1）创建拦截器组件（类），实现拦截器接口
			Interceptor，并实现拦截方法。
		2）注册拦截器，即在struts.xml中package下，
			通过标签来注册拦截器。
		3）引用拦截器，即在action的配置下，通过
			标签来引用拦截器。
	3、扩展
		1）拦截器栈
			拦截器栈是对一组拦截器的打包，目的是便于
			引用拦截器。action可以引用一个拦截器栈，
			相当于引用了栈内的所有拦截器。
		2）拦截器的调用顺序
			先进后出的原则，即拦截Action前会优先调用
			先配置的拦截器，拦截Action后会优先调用后
			配置的拦截器。
		3）预置拦截器
			Struts2预置了很多拦截器，定义在
			struts-default.xml中。
			并且其中有一部分拦截器是一定要使用的，否则
			Struts2框架无法正常运转，会导致项目出现
			问题。这些必须使用的拦截器定义在一个栈中，
			栈名为basicStack。
		4）默认引用拦截器
			实际上每一个Action都引用了默认的拦截器栈，
			栈名为defaultStack。
			如果我们在action配置下手动的引用了任何一个
			拦截器，那么该action将丢掉对默认拦截器栈的
			引用。
			defaultStack中引用了最常用的拦截器，这些拦
			截器包含了所有basicStack中的内容。
			该默认拦截器的引用，是通过标签
			<default-interceptor-ref>来设置的，可以在
			struts.xml中覆写。
			通常情况下，如果action引用自定义拦截器，
			那么同时也引用defaultStack。
			
三、NetCTOSS登录检查
	1、需求
		在通过地址栏直接访问某业务模块Action时，应该
		判断当前用户是否已登录，如果没有登录则踢回到
		登录页面。
	2、开发思路
		由于这样的校验除了登录模块Action外其他的Action
		都要做，属于通用的业务逻辑，那么使用拦截器
		来实现就十分合适。
	3、开发步骤
		1）创建拦截器组件LoginInterceptor
			从session中取出登录信息，根据结果是否为空，
			判断用户是否登录
		2）注册拦截器
		3）引用拦截器
		
四、fileUpload拦截器
	1、作用
		fileUpload拦截器可以实现文件的上传。
		该拦截器是Struts2预置的拦截器，并且该拦截器
		被defaultStack引用，即我们不需要做配置就可以
		使用这个拦截器。
	2、原理
		1）将请求中上传的文件，临时存在服务器的一个
			临时路径下。
		2）拦截器将这个临时文件对象传递给Action，由
			Action来决定该文件的处理方式。
		3）Action处理该临时文件。
		4）拦截器删除该临时文件。
	3、使用步骤
		1）导入包common-io.jar
		2）在Action中定义文件类型的属性，以及get、set
			方法，用于接收拦截器传入的临时文件。
		3）在Action的业务方法中，处理这个临时文件。
		4）在JSP中，设置表单项，以满足上传文件的
			要求。
			