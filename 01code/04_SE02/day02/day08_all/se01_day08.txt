基于缓存读写操作
void write(byte[] d)
将字节数组中的所有字节全部写出。

void write(byte[] d,int offset,int length)
将给定数组中从下标为offset处开始的字节
连续写length个

读取
int read(byte[] b)
试图读取给定数组总长度的字节量，并存入该数组中。返回值为实际读取到的字节量.

int read(byte[] b,int offset,int length)
试图读取length个字节，并存入给定字节数组
中从offset处开始，返回值为实际读取到的
字节量

java io
input and output  输入与输出

输入流与输出流

输入与输出的作用
输入流:输入流是用于读取数据的

输出流:输出流是用于写出数据的

我们看待输入流与输出流是站在我们编写的程序的角度。

流又分为高级流与低级流
低级流: 节点流
        数据有明确的来源或去向

高级流:过滤流，处理流。
        不能独立存在，必须依托另一个流工作。往往使用高级流是为了简化读写。

流根据读写的单位不同划分为:
字节流:以字节为最小单位读写数据。
字符流:以字符为最小单位读写数据。
        字符流只用于读写文本数据。


FIS&FOS
FileInputStream:文件字节输入流
FileOutputStream:文件字节输出流
这是一组低级流。

字节输入流的父类:InputStream
字节输出流的父类:OutputStream
这两个流是抽象的，不能实例化。


读写优化:
想提高读写效率，要减少读写次数。

带有缓冲区的缓冲字节输入输出流、
BufferedOutputStream:缓冲字节输出流
BufferedInputStream:缓冲字节输入流
是高级流

缓冲流的功能是内部维护一个缓冲区，可以减少读写次数从而提高读写效率






