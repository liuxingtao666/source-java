五、DOM
    1、什么是DOM：文档对象模型
        1)、是访问HTML中所有元素、内容、属性的对象模型，W3C的标准API
	When：找元素取内容——面试
	         添加、删除、修改元素
	         修改元素的属性和内容
        2)、DOM Tree：
        3)、document对象：加载到浏览器中的一个网页
	When：想要操作网页中的元素，必须使用document对象。
     2、常用节点对象和属性：
          1)、nodeName：
	两种情况：i、如果是元素节点或属性节点，得到的是标签名或属性名。
	    ii、如果是文本节点，统一为#text    
          2)、type：节点的类型，如：button，radio，checkbox
          3)、innerHTML：得到任何元素开始标签和结束标签之间的文本
	vs value：value是获得控件中的值，多用于表单控件
		innerHTML：多用于普通标签元素  

    3、重要属性：
        1)、.style属性：相当于css中元素开始标签的style属性
	When：想要修改一个元素的样式时使用
	语法：元素对象.style.样式属性=属性值；
	    如：.style.display="none";——相当于开始标签中定义了style="display:none"
	         .style.display="block";——再显示出来
	       When：弹出、关闭窗口；表单验证的提示
	说明：可以在样式表中定义的属性，在style中都有对应。但要去掉横线：	
	如：.style.backgroundImage;
	     .style.listStyleType
	强调：使用程序设置的样式，必须再次使用程序恢复原样，否则无法恢复。
	      所有DOM设置的效果，都是在内存中临时应用。原网页文件不变。一旦刷新，所有效果恢复原样。
	限制：一句话只能修改一个属性的值，不适合批量应用多个属性
        2)、.className属性：相当于开始标签中的class属性
	When：一次对元素应用一批样式时使用
	      清除样式时，只需将类名置为空字符串即可
	前提：预先准备好不同事件对应的样式类
	补充：获得焦点：onfocus
	语法：元素对象.className="css类名";
	       清除：.className=""
	强调：className和style属性可以同时使用
	       style属性的优先级高于className中类的优先级。
    4、取消事件：
        When：事件验证没通过，不想回发服务器了！
        How：Step1：为submit按钮增加onclick事件
		onclick="return 函数名();";
	    Step2：定义一个可以返回true或false的验证方法
		如果验证通过，返回true，浏览器继续提交
		如果验证未通过，返回false，浏览器取消提交
    5、查找元素：
        When：对任何元素操作之前，必须先找到元素
        回顾：方法一：按id查找:
		document.getElementById("id值");
        	局限：不是任何情况，所有元素都有ID。
	    如：动态生成的元素，没有机会固定id
        1)、方法二：按照元素父子关系定位元素
	When：子元素过多时
	        子元素动态生成时
	        没有id时
	前提：通过this或id，先抓住一颗救命稻草，将一个元素作为参照
	语法：元素对象.parentNode：获得元素的父节点
	       元素对象.firstChild：获得第一个直接子元素
	       元素对象.lastChild：获得最后一个直接子元素
	       元素对象.childNodes：获得左右直接子元素的数组。可以使用下标方式访问每个子元素
	强调：**HTML书写过程中的空格、回车、Tab，也会包含在childNode中。也是一个节点。
        2)、方法三：按照标签名称查找：
	When：抛开层次结构，只得到名称相同的元素
	说明：与层次结构联合使用，可以过滤看不见的文本节点干扰。
	语法：getElementsByTagName("标签名");
	    返回：同名标签的数组
	           如果没有找到，返回元素个数为0的集合
	强调：不限制直接子节点，只要包含，都可以找到

    6、创建、添加、删除元素
         1)、创建新元素：
	When：页面上没有，需要创建一个新的元素时
	语法：document.createElement("元素名")
	    其中：元素名，其实就是元素的标签名
	强调：创建新元素，只负责创建一个游离的新元素
	      如果不指定父元素，元素不会显示
	      必须和添加元素方法配合使用
         2)、添加新元素到指定位置：
	When：当新元素创建出来后，需要将其添加到指定父元素下
	前提：首先要找到父元素
	语法：父元素.appendChild(新元素对象)：追加到父元素所有子元素的末尾
	       父元素.insertBefore(新元素对象，被插队的元素)
         3)、删除元素：
	When：现在的元素，不想要了
	前提：首先找到父元素
	语法：父元素.removeChild(要删除的元素对象)
         
        补充：
	onchange事件：内容和选中项改变时触发，多用于文本框和列表框。
	列表框.selectedIndex属性：获得当前选中项的下标
六、DOM对象：
    1、DOM对象：定义了访问HTML各种元素的标准对象和方法。
    2、select对象：专门访问列表框的对象
        属性：
	.options：得到列表框中所有的选项——返回数组
	.options.length：得到列表中的选项个数
	         如果设置为0，则清空列表
        方法：
	add(option对象)：添加一个选项
	强调：必须先new一个选项，才可以add
	返回：新添加的选项
	remove(位置下标)：移除下位置的选项
    3、option对象：列表框中的每一个选项
	属性：
	   .text：显示的文本
	   .value：选中后回发服务器的变量值
	   .index：每个选项的下标位置
	向select中添加选项：
	   Step1：新建一个Option对象：	
		var o = new Option(显示文本,变量值)
	   Step2：调用select的add(o)方法，将选项对象加入列表
     4、Table对象：专门访问table元素
	常用集合：
	   rows：表格中的所有行——返回数组
	常用方法：
	   insertRow(下标)：在指定位置，增加一个空行
		返回一个新添加的行，为后续操作做准备
	       如果insertRow(-1)：表示在最后增加一行
	   强调：表格中增加一行，不需要先new出来
	   deleteRow(下标)：删除位置的行
     5、TableRow对象：专门访问表格中的一行
	常用集合：cells：当前行中所有单元格
	常用属性：rowIndex：当前行在表格中的下标位置
	常用方法：
	    insertCell(下标)：在当前行中增加一个新的单元格。返回新增加的单元格，为添加内容做准备
	       强调：insertCell(-1)：在一行的最后追加单元格
	    deleteCell(下标)：删除单元格
     6、TableCell对象：专门用于访问表格中的一个单元格
	属性：cellIndex：
	       innerHTML：单元格的文本内容
     7、如果TableCell中包含控件：如按钮，文本框
	注意：按钮和文本框就没有DOM对象，不能new出来。
	步骤：
	      Step1：先createElement("input")
	      Step2：修改元素的type属性为button、text
	      Step3：修改元素的value属性为显示文本
	      Step4：将设置好的元素 追加到父元素上
    8、event与事件：
        1)、三种定义事件的方式：
	i、回顾：元素开始标签中：on事件名="方法名(参数)"
	ii、动态关联：运行时才使用程序为按钮添加事件
	   When：由于控件运行时才生成，无法提前定义
	  语法：元素对象.on事件名=function(参数){
				方法体;		
				}
	  强调：动态关联，都需要提前定义方法实现
	iii、动态关联：时髦的写法
	   语法：
	   元素对象.addEventListener("事件名",函数名,false);
         2)、事件处理机制：冒泡机制
	What：当单机内部元素时，其实也单击在了外围元素区域内。如果刚好内外元素都设置了同一个事件，则两个事件由内向外触发。
         3)、event对象：
	What：记录了事件发生时，鼠标的位置，键盘的状态以及触发对象信息。
	How：Step1：在开始标签中，事件方法的参数后，增加event参数——关键字，遵照执行
	       Step2：js中方法定义时，追加一个参数，如e——形参，可自定义。
	常用属性：.clientX/.clientY：拖拽功能常用
	       .cancelBubble=true：取消冒泡
	重要属性：
	       IE10以下：e.srcElement
	       Firefox:e.target
	       获得事件最初触发的控件，无论如何冒泡，都不会变化。
	    How：获得最初点击的控件：
	      var 变量名=e.srcElement || e.target;
	      其中：||表示浏览器选择其一执行
	如何有效利用冒泡：
	    如果子元素中定义有大量重复事件，建议将事件统一定义在父元素中。
	    在事件处理方法中，捕获最初的事件源。
     















	        