3、Array对象：
    1)、创建：
	语法：var 变量名 = new Array(元素个数);
	元素个数可以省略
         初始化：
	var 变量名 = new Array(元素1,元素2,元素3...)
	强调：数组中的元素，不限定类型：
	如：var test = new Array(100,"a",true);
	简写：var 变量名 = [元素1，元素2，...];常用
         访问元素：
	数组变量名[下标]
         二维数组：
         	var test = new Array(7);
         	test[0] = new Array(2);
      **区分：new Array(7)：有7个元素的数组
	    **7不是最大上限，可以超过
	     new Array([7])：只有一个元素的数组，第一个元素是7.
	     new Array():0个元素的数组，但是后续可以初始化任意多个元素
    2)、方法和属性：
        回顾：str.match(/js/g); 返回一个数组
	    返回值.length：数组中元素的个数
	i、获取数组中元素个数：.length
	ii、打印所有元素：
	     数组.toString():默认使用都好分割每个元素
	    自定义连接符：
	     数组.join('连接符')：使用自定义的连接符分割每个元素。
    3)、连接数组：把两个数组连接起来。返回连接后的新数组
         语法：
	数组.concat(元素1，元素2，元素3)：直接将元素追加到数组后，形成新数组
        或数组A.concat(数组B)：将数组B的元素追加到数组后，形成新数组
	强调：原数组均不变。
    4)、获取子数组：
        语法：数组.slice(开始位置,结束位置)
	强调：结束位置省略，表示获取从开始位置先后所有元素
	　　　**前包含后不包含
    5)、数组排序：
        i、默认排序：按元素转化为字符串后进行排序
	语法：数组.sort()
	强调：**排序会直接修改原始数组
        ii、自定义排序：
	语法：
	     Step1：定义排序逻辑
	         排序函数：
	         function 函数名(参数1,参数2)
		{
		    比较逻辑；
	 	    return 大于0或小于0的数;
		}
	     Step2：
	 	数组.sort(函数名)
	说明：所有浏览器无论采用什么办法，都只有从小到大的排列。把小的数放签名，把大的数放后边
	       人为颠倒逻辑，就好像骗过浏览器，让他以为原来的a-b>0;其实是-(a-b)>0;

	     
	如果比较逻辑相反：即为倒叙
    6)、数组元素颠倒：把原数组所有元素前后颠倒
         语法：数组.reverse()

4、Date对象：
    1)、创建：var now = new Date();
	说明：实例化一个日期对象
	       同时默认获得当前系统时间
	     var date2 = new Date("2013/3/20 11:12");
    2)、常用的方法：
         i、日期处理：
         日期对象.getDate()：获得时间中，日期部分。
         日起对象.toLocaleString();包含日期和时间的完整格式化。自动转化为浏览器系统格式
	       .toLocaleDateString():只显示日期部分
	       .toLocaleTimeString():只显示时间部分
	   说明：无24小时转12小时的函数，要自己计算和拼接字符串
         修改日期：日期对象.setDate(天数)：根据天数和现在的日起对象，自动计算出新的日期
	      如：4.25.setDate(44)=4.44=>5.14
        ii、小时处理：
	语法：.getHours()：日期中小时部分
	总结：日期的每个组成部分，都有get方法对应
	       日期中的每个组成部分，都对应有set方法。
	       set方法都会自动判断时间进位。
    5、Function对象：
        1)、现象：同名，不同参数两个函数，无论调用时传递多少个参数，永远只执行最后一个。
	原因：javascript中一切都是对象。方法也是对象
	实际上：javascript方法是：
	var 变量名/方法名 = 
		new Function(
		    "参数1","参数2",...."参数n",
		    "方法体"
	           );
	简写：var 变量名/方法名 = 
		function(参数列表){
			方法体
		}——时髦
        2)、Function对象的常用属性和方法：
	 length属性：获得方法的参数个数
	 .toSrting()方法：打印完整方法内容
        3)、arguments：函数内部悄悄保存所有传入参数的数组。
	所有function中都隐含着arguments数组，可以直接使用。
	i、强调：javascript中方法定义不用声明形参列表，就可任意传参。
	       所有传入的参数，自动被arguments数组全部保存。
	       所有参数都可以使用arguments数组的下标访问。
     6、全局函数：不用赋值和实例化，即可直接使用的函数
        常用：parseInt/parseFloat isNaN
        1)、编码解码：
	When：使用URL向服务器传递表单参数时，如果包含多字节字符，会出现乱码。
	解决：需要在发送前对内容进行编码
	     编码：把多字节文字转换为单字节编码
	       接收方需要解码后才能看到正常内容
  	     解码：把单字节编码还原回多字节内容
	encodeURI(带汉字的字符串):编码
	     返回的是编码后的ASCII字符串
	decodeURI(编码后的ASCII字符串)：解码
	     返回的是转换后的带汉字的字符串
        2)、eval函数：可以计算表达式的值，还可以执行字符串中的javascript语句
	When：执行一条字符串形式的语句时使用
	强调：eval函数如果接受的字符串是非法的js语句，则抛出异常，需要做异常处理！
	   var r = 2+3;
	   var r = eval("2+3");
	错误：
	   var r = 2+3=;
	   var r = eval("2+3=");
	   以上两句都有报语法错误
	异常处理：
	   try{
	        eval语句;
	   }catch(error){显示error}
	其中error包含的就是异常的信息，可以直接显示
四、BOM对象：对浏览器窗口进行访问的API
	强调：除网页内容外的浏览器其它部分按钮或组件
    1、历史记录：history
	后退：history.back();=history.go(-1);
	前进：history.forward();=history.go(1);
	刷新当前页：history.go(0);
    2、跳转、打开新网页：
	1)<a href="URL" target="_self">
	     替换当前页，打开新网页
	2)<a href="URL" target="_blank">
	     在新选项卡或窗口中打开超链接页面
                可以重复打开同一个链接
	3)window.open("URL","网页名")
	     网页名：由自己定义，无关开发和显示。仅作为控制不允许重复打开之用
	     同一个网页名的地址，不能打开多个选项卡
	4)Location.href:
	     Location指的就是浏览器的地址栏
	     href，就是地址栏中的地址文本。
	Location.href=“URL”;效果同target="_self"
	5)iframe中的超链接：
	    <a href="URL" target="_top">
	        链接内容
	    </a>
	    _top：跳出先有框架限制
    3、对话框：弹出提示或警告信息的小窗口
	[window.]alert("警告内容")
	确认框：用于在正式提交操作之前
	    两个按钮：
	    确认：返回true，可以继续执行后边的程序
	    取消：返回false，终止当前程序的运行
	    语法：confirm("确认信息"):返回true、false
	         当执行到confirm时，弹出确认框，程序停止执行。直到用户点击了确认或取消按钮，才继续执行
   4、计时器：
      1)、周期性计时器：按照一定周期循环执行一个函数
	语法:var id = setInterval(要执行的函数名,周期)
	     返回一个唯一的数值id，表示当前正在运行的计时器。
	其中：周期单位为毫秒
	说明:每隔一个周期，执行一次函数
	停止周期性计时器：
	      clearInterval(id)、
	必须要显示关闭计时器，否则一直循环下去
     2)、一次性计时器：等待一段时间后，自动执行一次，执行完自动关闭。
	语法：var id = setTimeout(要执行的函数名,等待时间)
	停止等待：clearTimeout(id);








