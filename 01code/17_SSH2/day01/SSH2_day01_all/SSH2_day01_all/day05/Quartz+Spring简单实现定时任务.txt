Quartz+Spring简单实现定时任务

quartz是opensymphony开源组织在job scheduling领域又一个开源项目,
它可以与j2ee与j2se应用程序相结合也可以单独使用。
quartz可以用来创建简单或为运行十个，百个，
甚至是好几万个jobs这样复杂的日程序表。jobs可以做成标准的java组件或ejbs。



quartz官方： http://www.opensymphony.com/quartz/ 
定时批处理作业是j2ee企业应用里很重要的一环，用来在晚间进行财务挂账，
数据转存，新闻联播等等操作。 而在spring里，已经很好的集成了quartz，
简单到像配cron一样，在xml文件里面配一下时间就可以自动执行，不需要写一行代码。
spring对quartz大刀阔斧的简化堪称范例。



例子： 1、被调度的类

package com;

import java.util.Date;

public class Job1{
	
	public Job1() {
		
	}

	public void execute(){
		System.out.println("job1-" + new Date());
	}
}

2、spring的配置文件：
    
<!-- 计划调度管理工厂 -->
	<bean id="schedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cornTrigger" />
			</list>
		</property>
	</bean>
<!-- 定义任务组件触发的时间 -->
	<bean id="cornTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="jobTask1" />
		</property>
		<property name="cronExpression">
			<value>0/10 * * * * ?</value>
		</property>
	</bean>
	
	<!-- 定义任务调度组件调用的对象和方法 -->
	<bean id="jobTask1" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="job1">
		</property>
		<property name="targetMethod" value="execute">
		</property>
	</bean>
<!-- 要调用的工作Bean组件 -->
	<bean id="job1" class="com.Job1"></bean>


3、在web.xml定义ContextLoaderListener，启动Tomcat实例化Spring容器
 <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  
  <listener>
  	<listener-class>
  		org.springframework.web.context.ContextLoaderListener
  	</listener-class>
  </listener>

4、启动服务器测试
启动服务器会自动实例化Spring容器，Spring容器会实例化
quartz组件对象启动任务组件，按计划执行Job1功能。



================关于cron表达式================================

cron(0/10 * * * * ?)表达式包括以下 7 个字段：

* 秒
* 分
* 小时  
* 月内日期
* 月
* 周内日期
* 年（可选字段）

特殊字符

cron 触发器利用一系列特殊字符，如下所示：

* 反斜线（/）字符表示增量值。
	例如，在秒字段中“5/15”代表从第 5 秒开始，每 15 秒一次。

* 问号（?）字符和字母 l 字符只有在月内日期和周内日期字段中可用。
  问号表示这个字段不包含具体值。所以，如果指定月内日期，
  可以在周内日期字段中插入“?”，表示周内日期值无关紧要。
  字母 l 字符是 last 的缩写。放在月内日期字段中，
  表示安排在当月最后一天执行。在周内日期字段中，如果“l”单独存在，
  就等于“7”，否则代表当月内周内日期的最后一个实例。
  所以“0l”表示安排在当月的最后一个星期日执行。

* 在月内日期字段中的字母（w）字符把执行安排在最靠近指定值的工作日。
  把“1w”放在月内日期字段中，表示把执行安排在当月的第一个工作日内。

* 井号（#）字符为给定月份指定具体的工作日实例。
  把“mon#2”放在周内日期字段中，表示把任务安排在当月的第二个星期一。

* 星号（*）字符是通配字符，表示该字段可以接受任何可能的值。

字段 允许值 允许的特殊字符
  秒 0-59 , - * /
  分 0-59 , - * /
小时 0-23 , - * /
日期 1-31 , - * ? / l w c
月份 1-12 或者 jan-dec , - * /
星期 1-7 或者 sun-sat , - * ? / l c #
年（可选） 留空, 1970-2099 , - * /

表达式意义
"0 0 12 * * ?" 每天中午12点触发
"0 15 10 ? * *" 每天上午10:15触发
"0 15 10 * * ?" 每天上午10:15触发
"0 15 10 * * ? *" 每天上午10:15触发
"0 15 10 * * ? 2005" 2005年的每天上午10:15触发
"0 * 14 * * ?" 在每天下午2点到下午2:59期间的每1分钟触发
"0 0/5 14 * * ?" 在每天下午2点到下午2:55期间的每5分钟触发
"0 0/5 14,18 * * ?" 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发
"0 0-5 14 * * ?" 在每天下午2点到下午2:05期间的每1分钟触发
"0 10,44 14 ? 3 wed" 每年三月的星期三的下午2:10和2:44触发
"0 15 10 ? * mon-fri" 周一至周五的上午10:15触发
"0 15 10 15 * ?" 每月15日上午10:15触发
"0 15 10 l * ?" 每月最后一日的上午10:15触发
"0 15 10 ? * 6l" 每月的最后一个星期五上午10:15触发
"0 15 10 ? * 6l 2002-2005" 2002年至2005年的每月的最后一个星期五上午10:15触发
"0 15 10 ? * 6#3" 每月的第三个星期五上午10:15触发
