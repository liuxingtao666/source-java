回顾
  数据类型：基本类型和引用类型
  基本类型：是计算机处理数据的单元，是数据处理的
  基本规则
  有8种： 
  整数：byte short int long  补码==有符号数
  浮点数：float   double     IEEE 754 标准
  布尔类型：boolean
     注意: true 和 false 是布尔类型字面量
  字符类型： char   

  运算符
  
1 运算符 数学运算  \  % 
  1) 整数除法是整除运算
     浮点数除法是浮点除
     
   数学除法： 5/3 = 得 1 余 2
    System.out.println(5/3);//1
    
    double d = 5/2;
    double d = 5D/2;
     
    double price = 55.99;
    
    System.out.println(price * (80/100));
    System.out.println(price * (80.0/100));
  
  2) % 取余数 运算  
  
     数学除法： 5/3 = 得 1 余 2
    
   System.out.println(5%3);//2
  
   System.out.println(-4%3);//得 -1 余 -1
   System.out.println(-3%3);//得 -1 余 0
   System.out.println(-2%3);//得 0 余 -2
   System.out.println(-1%3);//得 0 余 -1
   System.out.println(0%3);//得 0 余 0
   System.out.println(1%3);//得 0 余 1
   System.out.println(2%3);//得 0 余 2
   System.out.println(3%3);//得 1 余 0
   System.out.println(4%3);//得 1 余 1
   System.out.println(5%3);//得 1 余 2
   System.out.println(6%3);//得 2 余 0
   //...
   
2 自增（减）运算 ++ -- 
   运算规则：将当前整数变量的值增加1
   int a;
   a++;//编译错误
   a = 1;
   a++;//a增加1
   ++a;//a增加1
   System.out.println(a);//3
   
  表达式：就是变量和运算符组成的算式 
  表达式经过计算也是有值的。
   
   byte b1=1;
   byte b2=2;
   int i = b1+b2;
   //经过运算以后，表达式b1+b2的值是：int类型3
   //变量b1的值是：byte 类型的1
   
   a=1;
   //a++ 是自增表达式：运算过程
   // a++ 称为后++：先取值，再增加
   //1) 先取a的值1作为"a++表达式"的值1
   //2) 再将a的值1增加1 a为2 
   System.out.println(a++);//输出a++表达式的值1
   System.out.println(a);//输出a的值2
   a=1;
   a = a++;//计算顺序：先计算a++表达式，将
   //表达式的值赋值给a
   // ++运算 1) 先取a的值1作为a++表达式的值1
   // ++运算 2) 再将a的值1增加1 a为2 
   // =赋值运算  将"表达式a++的值"1 赋值给a a为1
   System.out.println(a);//1
   
  a=1;
  //++a; //先++ 先增加a，然后取值
  //1) 首先将a的值1 增加1 a为2
  //2) 将a的值2 作为++a表达式的值2
  System.out.println(++a);//2
  System.out.println(a);//2
  
3 关系运算  > >= < <= == !=
  关系运算的结果是 true、false 
4 逻辑运算 && || ! 
   逻辑运算的参数是boolean类型结果也是boolean类型 
   && 与运算  表示"并且"关系的 
      true && true  -> true
      false && true -> false
      true && false -> false
      false && false -> false
   || 或运算 表示或者关系
      true || true  -> true
      false || true -> true
      true || false -> true
      false || false -> false
   ! 非运算
      ! false  -> true
      ! true   -> false   
  业务案例: 判定一个字符ch是否为大写英文字符
  分析：ch 的值 是 A B .... Z 之间的字符 
                 65      90 
   如果：65 <= ch <= 90 那么 ch 就是英文字符
   即：ch>=65 && ch<=90 成立 ch 就是英文字符
  实现：
    char ch = 'B';//66  '中'
    // 66>=65 && 66<=90
    // true   && true
    // true
    if(ch>='A' && ch<='Z'){
    	System.out.println(ch+"是英文字符");
    }else{
        System.out.println(ch+"不是英文字符");
    }
     
  业务案例: 判定一个字符ch是否为英文字符
 分析： 这个字符是大写或者是小写字符
  
  if((ch>='A'&&ch<='Z')||(ch>='a'&&ch<='z')){
    //...
  }else{
    //...
  }
   
 5 非短路逻辑运算  & | 
    一般工作中不用，但是面试时候可能会考！
  业务规则：允许60岁以上的老太太通过
  短路规则测试：
  如果 sex=='女'返回false则 不再执行age>=60
  直接返回 整体结果：false 就是短路与运算
 int age = 28;
 char sex = '男'; //会引起短路的条件
 if(sex=='女' && age++>=60){
    System.out.println("欢迎！");
 }else{
    System.out.println("明天再来！");
 }
 System.out.println(age);//28 检查是否发生短路
 
 短路的或测试：女的或者60岁以上的可以通过
 “短路或”规则：一旦sex=='女'成立返回true，则不再
 计算 age>=60 直接得出整体结果 true
 int age = 20;
 char sex = '女';
 if(sex=='女' || age++>=60){
   System.out.println("欢迎！");
 }else{
   System.out.println("明天再来！");
 }
 System.out.println(age);//20 说明发生的短路运算
 
6 条件运算符，3元运算符
  语法： 条件表达式 ? 表达式1 : 表达式2
  当条件表达式返回true的时候，使用表达式1作为整体
  表达式的结果，否则使用 表达式2 作为整体结果。
 
 如：
  int a = 5;
  int b = 7;
  int c = a>b ? a : b;//c是a b中最大值
  
 业务案例：根据查询结果总行数和一页显示数量，计算
 分数的总数
 分析：如果行数能够被每页行数整除就直接得到页数
   否则需要增加一页。
 设计：
  //输入
  int rows = 33;//总行数
  int size = 10;//每页的大小
  //输出结果
  int pages;//计算结果的页数
  //算法
  pages=rows%size==0 ? rows/size : rows/size+1;
  //显示结果
  System.out.println("总页数："+pages); 
 
7 赋值运算  与 赋值表达式
  int a = 5; 
  int b;
  b = a;//赋值运算，将a的值赋值给b
  System.out.println(b=a);//5
  赋值表达式：有值，这个值是赋值的值
  
  int c;
  c = b = a = 8;
  运算过程 执行 a=8: a的值更改为8，a=8表达式的值8
  再执行 b=8 :b的值更改为8，b=8表达式的值8
  再执行 c=8 :c的值更改为8，c=8表达式的值8
  a = c = 5*(b=6);
  
  符合赋值运算 + - * / % 等 和 = 一起组成
    +=  *=  /=  %=  等
  int a = 1;
  a += 5.5; // 相当于 a = (int)(a+5.5)  
   
 业务：将一个整数按照10进制拆分为数字
    如：3873  拆为 3 8 7 3 
    int num = 3873;
    int last = num%10;//3
    num /= 10;// num = 387 
    last = num%10; //7
    num /= 10;//38
    last = num%10;//8
    num /= 10;//3
    last = num%10; //3
   
8 字符串连接运算 +
  Java 中只有一个运算符重载：+ 
  重载：运算符名称(+)一样，但是功能不同！
  1) 当+两端是数值时候，就是 数学加法
  2) 当+一端是字符串时候，就是字符串连接
    会将不是字符串的一端转化为字符串进行连接
    转化 按照“人的习惯”转换
  也就是说：有两种加法！
  如： 
    int a = 5;
    char c = '5';
    String s = "5";
    
    System.out.println(a+5);//10
    System.out.println(s+"5");//"55"
    System.out.println(a+c);//5+48+5=58
    System.out.println(a+'5');//58
    System.out.println(a+"5");//"55"
    System.out.println('5'+"5");//"55"
    System.out.println(c+"5");//"55"
    System.out.println(c+'5');//106
    System.out.println(c+s);//"55"
    System.out.println(a+c+s);//"58"+"5"="585"
    System.out.println(c+c+s);//"1065"
    System.out.println('1'+'2'+'3');
    System.out.println("1"+'2'+'3');
   
9 分支流程控制结构
  
  1) if ... else
  语法 1：
    if(分支条件){
      //语句块
    }
  流程：计算分支条件，如果分支条件返回true就执行
  语句块，否则就不执行语句块
 
 语法 2：
    if(分支条件){
      //语句块1
    }else{
      //语句块2
    }
 流程：计算 分支条件 如果返回true，就执行语句块1
 否则执行语句块2.
 
 注意：如果语句块“只有一行”语句，则语句块{}可以省略
  
  int a = 5;
  int b = 3;
  int c;
  if(a>b)
    c = a;
  else
    c = b;
  //c 是ab中的最大值
  System.out.println(c);
 
  3) 多路分支 
  
  if(分支条件1){
    //语句块1
  }else{
    if(分支条件2){
      //语句块2
    }
  }
 语法：实际上是if语句的一种嵌套形式。
  if(分支条件1){
    //语句块1
  }else if(分支条件2){
    //语句块2
  }else if(分支条件3){
    //语句块3
  }else{
    //语句块4
  }
  
  分支条件1 - true -> 语句块1 -> 结束
  |-false-> 分支条件2 -true-> 语句块2->结束
            |-false->分支条件3-true->语句块3->结束
                      |-false->语句块4->结束
  案例：个人所得税计算
   如薪水：4000 s salary 薪水
   起征点: 3500
  超过起征点1500以内(s-3500<1500) 税率 3%
    税：s-3500*0.03 = 500*0.03 = 15
    税后 4000-15 = ?
 超过起征点1500 ~ 4500以内(s-3500<1500) 税率 10%
  如：薪水：6000 
  6000 - 3500 = 2500
  1500*0.03 + 1000*0.1 = 45+100 = 145
  
  简单计算办法:
  6500-3500 = 3000
  3000*0.1 - 1500*0.07 = 300 - 105 = 195
  
  
  
  
  
 
 
 
 
   
   
   
  
  
  
 







 
    
    
  
     
    
 
  
  
   

  
  
  
   
  
   
 
 
 
 
 
 
 
 
 
 
 
 
 
  
  
  
   
      
      
   
  
  
  
  
  
  
  
  
  
  
   
  
  
  
  
  
  
   
  
  
  
  
  
  
  
  
  
  
  