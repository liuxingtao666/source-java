回顾
   运算符 常见坑
   数学运算符： /  %  
   自增运算：++ --
      表达的值
   比较运算
   逻辑运算
     短路逻辑运算 && ||
     非短路运算   &  |
   条件运算符
   赋值运算 
    int a = 2;
    a+=2.5; // a =(int)(a+2.5);//4
    a/=2.5; // a = (int)(a/2.5); 0
     
   字符串连接运算 +
    流程控制：顺序  分支  循环

1 switch case 多路分支控制
  switch：开关  
  case：情况下
  break：打断
  default: 默认情况下
  
  多路分支的区别于选择
  1) if ... else if ... 是分支条灵活。
  2) switch case 只能根据整数条件分支,不够灵活
    switch的性能优于 if else if 
  
  建议：如果分支条件是整数，尽可能采用switch case
  其它情况下使用 if else   
  
  switch整数条件：int short char byte 不能是 long
  case  后面只能是整数常量！ 不能是变量
  
2 for 循环结构
  "经典"用法：处理与有规律次数和个数相关的循环
    简称：计数的循环
   分析业务: 实现2+4+6+8=？10以内的偶数和
   //i = 2 4 6 8
    sum = 0; 
    i = 2;
    sum +=i; //sum=2
    i += 2;//i=4
    sum += i; // sum=6
    i += 2;//i=6
    sum += i;// sum=12  // sum = 2+4+6
    i += 2;//i=8
    sum += i;// sum = 20// sum = 2+4+6+8
    结束：i<10
    总结：i=2 开始 到不满足i<10结束  每次i增加2
          每次 计算sum+=i 
  
  for的语法结构：
  for(初始化表达式; 循环条件; 递增表达式){
     //循环体
  }
  实现：
  int sum = 0;/*0*/
  int i;
  for(i=2/*1*/; i<10/*2*/; i+=2/*4*/){
    //i = 2 4 6 8 有效的i
    sum+=i;/*3*/
  }
  System.out.println(sum+","+i);//10
  执行流程：
 [0 sum=0]->[1 i=2]->[2 2<10]-true->[3 sum=2]
 ->[4 i=4]->[2 4<10]-true->[3 sum=6]->
 [4 i=6]->[2 6<10]-true->[3 sum=12]->
 [4 i=8]->[2 8<10]-true->[3 sum=20]->
 [4 i=10]->[2 10<10]-false->[结束]
   
  如何使用for：
    1) 找到循环变量的初始值
    2) 找到 循环变量的结束条件
    3) 找到 每次递增多少
    4) 循环处理的过程
  
 案例：计算PI
   公式：PI = 4x(1/1-1/3+1/5-1/7+1/9-1/11...)
 分析：输入：没有
       输出：PI
   算法：先计算和 在乘以4
  sum = 1/1-1/3+1/5-1/7+1/9-1/11...
      = (1/1-1/3)+(1/5-1/7)+(1/9-1/11)+...
         1   1+2   5   5+2    9   9+2 
  i   =  1   i+2   5   i+2    9   i+1
   1) 初始值：i=1
   2) 结束条件 i<10000
   3) 递增 i+=4
   4) 循环体 sum+=(1.0/i - 1.0/(i+2))
   double sum = 0;
   for(int i=1; i<10000; i+=4){
     sum += 1.0/i-1.0/(i+2);
   }
   double pi = sum*4;
   System.out.println(pi);
    
 案例：计算20以内的阶层 n!=1*2*3*...*n n<=20
  分析：必须使用long类型计算，int会溢出
     输入：次数 n
     输出：阶乘
     算法： 
     1) 初始 s=1, i=1
     2) 结束 i<=n
     3) 递增 i++
     4) 循环体  s*=i;
   int n = 20;
   long s = 1;
   for( int i=1 ; i<=n ; i++ ){
     s *= i;
   }
   System.out.println(s);
   
  Java API java.math.BigInteger 提供大整数的处理
   对于超过long范围的数据，就要使用这个数据类型
   BigInteger性能稍差。
	
  创建BigInteger类型的数据，需要使用String作为
  初始化参数。
  如：创建一个数
    BigInteger n1 = new BigInteger("234");
    BigInteger n2 = 
      new BigInteger("234121212121212122100000");
    
  BigInteger类型 提供了运算方法, 不能使用数学
  运算符进行计算的。必须使用方法计算
   n1+n2 //编译错误 
  计算方法：add()+  divide()/ 
     multiply()* subtract()-
 加法：
  BigInteger n3 = n1.add(n2);// n1+n2
  System.out.println(n3);

 计算超过 20的阶乘(利用 Java API BigInteger )
   输入：int n
   输出：BigInteger s;
  算法： 
    1) 初始化 
      s = new BigInteger("1");
      i = 1;
    2) 循环结束 i<=n
    3) 递增 i++
    4) 循环体 // s*=i; 
      //初始化一个BigInteger
      BigInteger x = new BigInteger(""+i);
      s = s.multiply(x);
      
  案例：计算 9+99+999+...+999999999 = ?
  分析：
   输入：
   输出：long sum 
  算法：
    1) 初始 i = 1
      sum = 0;
      num = 0;
    2) 结束 i<=9
    3) 递增 i++
    4) 循环体：
      num = num*10+9;
      sum += num;
  
  i = 1  2   3     4         5
 num= 9 99 999 num*10+9 num*10+9
 num=            9999      ?

  如何:Debug    bug：虫子
  1) 设计算法：设计合理的理想“正确”结果
  2) 在软件中加入跟踪语句(打桩)输出运行期间
    的数据。
  3) 比较输出的数据 与 理想的“正确” 
  4) 如果发现不同， 就找到“错误(bug)”了
  5) 分析错误的原因，进一步处理
  
  注意：处理错误的前提，是你知道“正确”！
  
3 break continue
  案例：检查  100 以内的所有质数 
   质数：只能被1和自身整除的数 称为 质数 
    如： 7  13 
  约数：一个数的因数 如：15有约数：1 3 5 15
   不是质数：如果一个数 除了 1 和自身还有其他约数，
     就不是质数
  如果一个数，没有其他(1和自身除外)约数，就是质数
   
  7： 1  7
  13: 1  13
  15: 1  3  5  15  不是质数
  16: 1  2  4  8  16
  17: 1  17
  18: 1  2  3  6  9  18
  50: 1  2  5  10 25 50
  55: 1  2  3  4  5  
  发现规律：一个数n如果存在 2~n/2范围内的约数(整除)
    则这个数不是质数。否则如果没有其他约数，这个数
    是质数。
  设计：
    输入: n 被检查的数
    输出：boolean isPrime=true 布尔类型，true是质数 
   算法：
    1) 初始 i=2
    2) 结束 i<=n/2 
    3) 递增 i++
    4) 循环体 
           检查 n % i == 0 (整除) 如果true
             则  isPrime=false  break 
   
3  while 循环的经典用法
   经典用法：用于处理与次数无关循环
  语法结构： while：当  
   while(循环条件){
     //循环体
   }
  流程：当 循环条件 满足时候(true) 执行循环体
    如果不满足（false）循环条件了就结束循环。
 如何使用循环：
   1) 找到循环体 
   2) 找到循环结束条件
  案例: 将一个整数倒过来！
    如： 31827 到过来  72813 
  分析:
      输入：int num = 31827 
      输出：int sum = 0;
      算法：int last;
      last = num%10;//7
      sum = sum*10+last;//7
      num /= 10;// 3182
      
      last = num%10;//2
      sum = sum*10+last;//72
      num /= 10;//318
      
      last = num%10;//8
      sum = sum*10+last;//728
      num /=10; //31
	  
	  last = num%10; //1
	  sum = sum*10+last;//7281
	  num /= 10;//3
	  
	  last = num%10;//3
	  sum = sum*10 + last;//72813
	  num /=10; //0
	
	1) 找到循环体  
	  last = num%10;
	  sum = sum*10 + last;
	  num /=10; 
	2) 找到循环的条件
	  当 num 不是 0 的时候，循环处理
	 
  实现： 
    int num = 73812;
    int sum=0, last;
    while(num!=0){
      last = num%10;
      sum = sum*10+last;
      num /= 10;
    }
    System.out.println(sum);
      
  while “常用于”处理与次数无关的循环 
    循环条件是在循环体开始位置判断的循环 

4  do while 循环的经典用法

5  循环的替代性（非经典用法）  

6  循环的选择问题










