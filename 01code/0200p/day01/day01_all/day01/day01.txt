OOP 面向对象编程
  Object == 对象 == 东西
  啥都是东西==是个物件都是东西==啥都是对象
  
  对象 
  1) 计算机软件业务中的一个实体（就是一个可以
     识别的东西）
     如：俄罗斯方块中：每个小格式是一个对象（东西）
     每个四格方块是一个对象（东西）包含4个小方格
  2) 对象本质是结构化数据, 就是数据
   如：每个小格(cell)可以表示为行列两个数据
     cell(0,3) cell(0,4) cell(0,5) cell(1,3) 
  下落计算：就可以利用行增加1实现
 
   每个格子对象的数据结构一样吗？
   Java中用类 来定义 对象的数据结构！
  类：对象的数据结构定义。
  如：定义格子的结构, 定义了每个格子包含两个属性
    分别是 行和列
   class Cell{
     int row;
     int col
   }
   再如：定义4格方块的结构,包含4个小格子
   (Tetromino 是专用词 4格方块)
   class Tetromino{
     Cell t1,t2,t3,t4;
   }
   或者
   class Tetromino{
     Cell[] cells = new Cell[4];
   }
 Java 中利用类作为模板创建对象。用类来创建对象
   什么是创建对象：就是在内存中分配对象数据单元
   的过程。
   如: 让计算机开辟内存空间存储格子的数据（row,col）
   这个 过程称为创建格子对象
   代码是：new Cell()
   new 是运算，作用是开辟内存空间  Cell是类型
   运算结果是，在内存中按照（row,col）开辟了存储
   空间。
   
  引用变量：用类（Cell）定义的变量称为引用变量
  如： Cell c1; 定义了引用变量
   Cell c1 = new Cell();
 
 注意：对象（Object） == 实例（Instance）== 东西
 
 Java 内存的分配原则 （栈 堆 方法区）
  1) 对象（包括对象的属性）在堆中创建
    对象的属性称为“实例变量”，在类中声明
  2) “局部变量”在栈中创建
  局部变量：在方法中声明的变量称为局部变量
  3) 类加载到方法区（明天讲）
    
 引用变量的值是对象的首地址，引用变量通过首地址
 间接引用了一个对象，是间接的关系，引用变量的直接
 值是地址，不是对象！数组变量就也是这样！
  基本变量的值是直接值。 
 
  对象 类 引用变量
 
 方法：
   1) 对象的行为，对象的功能
   2) 是数据的计算方法（计算机只能处理数据）
 如：小格子的下落(drop)，是小格子的功能，
      算法是 row++
    左移动： moveLeft  右移动：moveRight
  语法：
   在类中定义方法
  class Cell{
    int row;
    int col;
    public void drop(){
      row++;
    }
  }
 
 方法的"重载"  
 重载: 名字一样的不同功能。(功能相近的不同方法)
 重载的方法：名字一样功能"不同的方法"，重载的本质
  是不同的方法。
  语法：方法名相同，参数列表不同 
 如：格子有两种不同的下落方式：1种是下落一步
   2种：下落n步，都称为“下落功能”
 
 调用：重载方法根据参数类型识别调用方法 
 
 this 关键字
   this 是引用变量，是方法隐含参数，在方法的运行
   期间引用调用方法的“这个(this)对象”(对象)。
   
如：
 class Cell{
   int row;
   int col;
   public void drop(/*Cell this*/){
     this.row++;//可以省略this.
   }
 }
 
 Java 中 同一个package中不能有同名类
 Demo01.java 文件定义在package day01中，包含两个类
 分别是：Demo01 和 Cell
 
 在新的包中定义Cell类
 
 构造器: 
   1) 描述了对象的创建过程 
   2) 一般用于创建对象初始化对象的属性
 如： Cell c1 = new Cell(1,3);
 构造器语法：
   1) 在类中定义
   2) 名字与类名相同（大小写都一样！）
   3) 不能定义返回值
   4) 可以有参数
   5) 使用new运算符调用，用于创建对象
  
   构造器的好处：简化对象创建过程
   Cell c1 = new Cell();
   c1.row = 1;
   c1.col = 3;
   Cell c2 = new Cell(1,3);
   
 如：
   class Cell{
     int row;
     int col;
	 public Cell(int row, int col){
	   this.row = row;//把参数row的值赋值
	   // 给当前对象的row 
       this.col = col;
     }
   }
   
   
  
  
 
   
   
   
   
   
   
   
   
   
 
  
  
  
  
  
  
  
  
  
  
  
  
  

 
