回顾
 abstract 
   1) 抽象类：不能直接实例化，只能被继承
   2) 抽象方法：约定子类必须重写的方法
     抽象方法的重写称为：实现方法
   
   3) 抽象类的具体实例一定是多态的，
     抽象方法的实现一定是多态方法。
     
 interface
   1）是一种特殊的抽象类。
   2）只能定义抽象方法和常量。
   3）接口就是用于约定子类的功能。
     如：Enemy 接口 约定了子类一定有方法 getScore()
   4) 接口可以实现多继承
     如：炸弹1 继承飞行物，实现 奖励 和 敌人
       炸弹1 是飞行物 也是奖励和敌人
       炸弹2 继承飞行物，实现 敌人
       炸弹2 是飞行物 也是敌人
   5) 接口是对方法的约定。
   
 内部类
   1） 封装类的定义在类内部。
   2） 内部类很少在类的外部使用
   3） 内部类可以共享外部类的属性和方法
   4）内部类有4种：成员内部类，静态内部类
    局部内部类，匿名内部类
    
1 匿名类：是一个特殊的局部内部类。
  1) 必须有父类型，可以是：类 抽象类 接口
  2) 是声明类并且直接实例化为对象了。
  3) 内部类的实例是继承于父类型的
  4) 匿名内部类的语法非常简洁，被广泛用在
   便捷继承、实现父类型的地方。如：便捷实现接口
  
  语法：
  Foo foo = new Foo();//创建Foo对象
  Foo f2 = new Foo(){};//创建Foo的匿名子类实例
  //{}是匿名子类的类体，Foo()是调用构造器
  class Foo{
  }
  
  回调方法
  
 class Person{
   String name;
   //接收一个任务
   public accept(Task task){
     System.out.println(name+"做"+task.getName());
     task.execute();
     System.out.println(name+"做完"+task.getName());
   }
 }
 //任务单
 interface Task{
   //获取任务的名字
   String getName();
   //执行
   void execute();
 }
  
 回调: 将一个封装方法的对象作为参数提交给另外一个
 方法执行，称为回调执行
 被提交的方法称为回调方法
 如：Task 中的 execute 方法就是回调方法
   这个execute 方法被 accept方法回调执行
    Comparetor 中的 comapre 方法是回调方法
    这个方法被sort方法回调执行。
    
   
   
   
     








 
 
 
 