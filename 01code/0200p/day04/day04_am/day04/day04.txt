回顾
  类的访问控制问题
  Java文件源文件的规定
  
  文件内容：
  
  package xxx.xxx.xxx; //?
  import ....// * 0个以上
  public class //? 只能有一个，如果有一个必须与
  //文件名相同！ 
  class //* 可以有多个
  
  static 定义使用类的资源
  
  final 
    //       老婆     红太郎   
  final int[] ary = {3,4};//与子偕老
  //ary = null;//编译错误
  ary[0]++;
  
  final Cat tom = new Cat();
  //tom = null;//编译错
  tom.age++;
  
  class Cat{
    int age;
  }

   重载与重写 区别与联系
   重载：“名字一样的不同方法”
     1) 在类里面(包括从父类继承的)中存在的方法
       名一样参数列表不同的方法。
     2) 本质是 业务功能类似 的“不同方法”
     3) Java根据参数类型不同调用不同的重载方法
        Java 尽可能进行类型转换再调用方法 
  重写：
    1) 一定是在子类中，“修改”父类的方法
    2) 只能在子类中重写，从父类继承的方法！
       如果不能继承的方法，就不能重写,如：不可见的
       方法：父类的私有方法
    3) 重写的方法，在运行根据对象的类型调用
    4) 方法名相同， 参数列表也相同
       抛出异常：可以是具体类型
       返回值：可以是具体类型
 
1 abstract 抽象的
  1) 抽象类：只是用来定义公共属性和方法的类
    不需要（不能）实例化创建对象的类，要定义为抽象类
    
    如：4个方块Tetromino，飞行物FlayingObject
    
   抽象类的语法：
   A 不能直接实例化，创建对象（不能 new）
   B 可以定义变量，引用具体类型的实例
   C 只能用于作为父类，被子类继承
   D 可以包含抽象方法
    
  2) 抽象方法 
   A 子类“必须”重写的方法，是对子类的方法约定！
   B 抽象方法只定义方法，不能有方法体。
   C 必须在在抽象类中定义抽象方法
   D 具体子类继承抽象类时候，必须实现全部的抽象方法

2 接口 interface
  1) 方法全部是抽象方法，属性全部是常量
  2) 是一种特殊的抽象类
  3) 用于约定子类的方法。
  4) 接口可以被子类 实现(Implement 就是继承)
  5) 一个类可以实现多个接口，体现多继承现象
    
  案例： 
    炸弹：是敌人，是奖励，是飞行物
  //敌人
  interface Enemy{
    int FULL = 100;
    /*public static final*/int HALF = 50; 
    /*public abstract*/int getScore();
  }
  //奖励
  interface Award{
    int LIFE = 1;
    int getType();//奖励类型
  }
   
 
 Array
 
 
 
 
 
 