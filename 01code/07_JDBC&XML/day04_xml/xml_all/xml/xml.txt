===========JDBC总结=============
1.理论了解:什么是JDBC   java.sql.*
   JDBC接口+数据库驱动包
*2.熟悉常用的JDBC的API
   a.Connection
     --createStatmenent()
     --preparedStatement(sql)
     --setAutoCommit(false)
     --commit()
     --rollback()
     --close()
   b.Statement
     --executeUpdate(dmlsql)
     --executeQuery(selectsql)
     --execute(ddlsql)
     --addBatch(sql)
     --executeBatch()
     --clearBatch()
     --close()
   c.PreparedStatement
     --executeUpdate();
     --executeQuery();
     --setXXX(index,参数值);
     --addBatch()
     --executeBath()
     --close()
   d.ResultSet
     --next()
     --getXXX("字段名或别名")
        getXXX(index)
     --close()
     --可滚动absolute(),relative(),first(),last()

select name from emp;
select sal+comm total from emp

*3.熟悉如何执行DML操作
  //获取Connection连接
  //获取PreparedStatement,将带?号的SQL发送编译
  //设置?参数值
  //调用executeUpdate()方法发送参数执行
  //释放Connection和PreparedStatment
*4.熟悉如何执行Select操作
  //获取Connection连接
  //获取PreparedStatement,将带?号的SQL发送编译
  //设置?参数值
  //调用executeQuery()方法发送参数执行,获取返回的
    ResultSet结果
  //访问ResultSet结果集数据
  //释放Connection,PreparedStatement,ResultSet
*5.事务控制
try{
  con.setAtutoCommit(false);
  ....执行DML1操作
  ....执行DML2操作
  ............
  con.commit();
}catch(){
  con.rollback();
}

6.批处理
  a.执行多个不同的DML语句--用Statement批处理
     Statement stat = con.createStatement();
     stat.addBatch(sql1);
     stat.addBatch(sql2);
     .....
     stat.executeBatch();
  b.执行同一个DML语句多次--用PreparedStatement批处理
    PreparedStatement pst = con.preparedStatement(sql);
    pst.setXXX(index,xxx);
    ...
    pst.addBatch();
    pst.setXXX(index,xxx);
    ...
    pst.addBatch();
    pst.executeBatch();//执行
7.可滚动游标的ResultSet
   默认只能用next()方法控制游标指针
   可以通过con.createStatement(
     指针是否可滚,ResultSet是否可更新)方法开启控制游标
 滚动跳跃的方法。例如absolute(),relative()等

*8.学会封装DBUtil
 --利用Properties将数据库连接参数提取到properties文件
 --客户访问数据库频繁，一般采用连接池技术控制连接
*9.学会DAO编写
  --编写实体类
  --编写DAO接口
  --编写DAO实现

===============XML==============
*1.掌握XML文件语法格式
*2.掌握Java如何解析XML文件
==========================
1.什么是XML，有什么作用
XML是一种数据文件格式。
全称eXtensible Markup Language
XML是W3C国际组织制定的标准，可以在不同系统平台
获得支持。
XML主要有以下应用场合：
--*采用XML文件当框架配置文件
--采用XML格式进行不同系统间数据交换
--采用XML存储少量数据(等价于小型数据库作用)

*2.XML基本语法
   a.XML文件由声明指令和元素构成
    文件第一行是声明指令
    内容由元素构成，元素格式：
    <开始标记>文本</结束标记>
   b.元素中开始标记和结束标记要严格一致，区分大小写,
     标记有开始必须有结束
   c.标记是可以嵌套，但是不能交叉
   d.属性必须在开始标记中使用。
     属性值必须用单引号或双引号括起来
   e.空元素写法
    <a></a> 或<a/>
   f.一个XML文档只能有一个根标记.
     即使没有内容也要加一个空的根元素。
   g.注释
     <!--注释文字-->
   h.实体
    在xml中遇到一些特殊字符，会破坏xml结构,因此需要
用实体替代字符。
    < 用 &lt; 替代
    > 用 &gt; 替代
    & 用 &amp; 替代
    ‘  用 &apos; 替代
    " 用 &quot; 替代
上面5个特殊字符，<和&必须用实体替代，其它3个建议使用

  i.文本域
   <![CDATA[ 文本信息 ]]>

   文本域中的信息，都当做普通字符，即使有特殊字符，
也当做普通字符

XML主要内容由数据及描述数据的标记构成。

*3.Java如何解析XML文件
  提示：解析之前，必须保障XML文件内容格式合法。
  
  对XML解析技术有以下两种:
   *1)DOM解析技术
    Document Object Model 文档对象模型。
   原理：先将XML文件载入内存，构建起一颗文档树对象
模型，之后遍历文档树对象。
    DOM：可以对XML解析，也可以修改

   2)SAX解析技术
   Simple API for XML 简单的XML API
   SAX：只能对XML进行解析,不能修改
   SAX原理：将XML文件内容一边读到内存一边解析，
   将读取的xml内容根据内容不同，调用不同的处理方法.
   例如遇到开始标记调用开始标记处理方法;
   遇到结束标记调用结束标记处理方法   

  *3)使用DOM4J工具解析XML
    SAXReader 解析器，可以将XML文档读入内存
  构建文档树。
    Document 文档树对象
    Element 元素节点

    doc.getRootElement():获取文档树的根元素
    el.elements("标记名"):从el元素找它包含的
 子元素（复数）。
    el.element("标记名"):从el元素找它包含的
 子元素（单数）。
    getText():获取元素的文本内容
    attributeValue("属性名")获取元素的属性值

  *4.利用DOM4J的XPATH技术
   
   XPATH技术可以根据指定的xpath表达式快速定位
文档树中的指定节点。
   XPATH使用方法：
    --在dom4j基础上引入jaxen-1.1-beta-6.jar
    --使用Element或Document的查找方法
      selectSingleNode("xpath表达式"); //返回单个元素
      selectNodes("xpath表达式");  //返回复数元素
    --XPATH表达式写法
     //标记 : 查找标记元素,在树中任何位置
     /标记 ：查找根元素,标记名是指定标记
     //标记[@属性='值'] : 根据属性做条件找标记元素
     //标记[子元素='内容'] ： 根据子元素内容找标记元素
================
/books/book : 查找books根元素下的book元素
//book  : 查找book元素,任意位置
//book[@id='2'] ：查找属性id=2的book元素
//book[name='天龙八部'] : 查找name=天龙八部的book元素

 5.DTD技术(了解)
  Document Type Definition 文档类型定义
  DTD作用：用于限定XML文件中使用的标记名,元素嵌套顺序,元素之间顺序,使用哪些属性等。

  1)DTD如何使用
   在xml文件中添加引用指令.
   <!DOCTYPE 根标记名 [
     //定义标记名和属性
   ]>

  <!DOCTYPE 根标记名 PUBLIC|SYSTEM *.dtd>

  2)DTD如何定义标记名
   <!ELEMENT 标记名 (子标记...)/>
   <!ELEMENT 标记名 (#PCDATA)/>
   <!ELEMENT 标记名 EMPTY/>
  3)DTD如何定义属性名
   <!ATTLIST 标记名 属性名 CDATA #REQUIRED/>

  #REQUIRED表示必须写，去掉表示可选
  4)量词匹配
   标记名* : 表示该标记允许出现0到多次
   标记名+ : 表示该标记允许出现1到多次
   标记名? : 表示该标记允许出现0次或1次
   标记名  ：表示该标记必须出现，而且出现1次





