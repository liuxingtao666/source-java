回顾
 Object：是Java的基类，Java所有类默认都继承于Object
  Object是任何类型的父类型。
  
 toString：是返回对象的文本描述。经常被重写。
   toString方法经常被自动回调，如:在字符串
   连接时候，被调用。
 
 equals：是用于比较两个对象是否相等。
   == 只能比较变量的直接值
   基本类型 用 == 比较的是直接值
   引用类型 用 == 比较的是引用的直接值（地址值）
  
  经常被重写
 
 hashCode：要与equals一起重写的方法。 
 
 String 类型：是Java中最重要的类型。
  
  1) 字符串对象是不可改变的。（不变模式）
  2) 内部是一个不可改变的字符数组
  
  3) String还提供了API方法，用于字符串的
   “修改”，查询等
   使用API方便，便捷
   但是：如果用字符数组和for循环等实现的优化算法
   性能会比 String API 好。
   
1 静态字符串的优化现象,静态字符串缓冲池
    目的：性能优化！减少字符串对象的创建
    1) 字符串字面量和常量称为“静态字符串”
    2) 字面量和常量的连接在编译期间执行，
      优化为一个静态字符串
    3) 在运行期间，Java在静态缓冲池中创建
    静态字符串，并且尽量使用同一个字符串对象。
    4) 动态字符串：字符串运算结果，或者连接结果
    或者 new运算创建的字符串，等运行期间创建的字符串
    不参与静态优化

2 "正则"表达式: 是字符串规则定义
   1) 字符串规则(规律)：
      如: 邮政编码是有规律的
       手机号码是有规律的
       电话号码是有规律的
       身份证号是有规律的
       “国骂”是有规律的
   2) 正则表达式:就是用来定义字符顺序规律的
   经常用于字符串内容的查找：
   比如：查找一段文字中在那些地方出现了“国骂”
   3) 正则表达式语法：
   A 字符序列：
     如：我去  我草
     这就是最简单的正则规则，表示：有两个字符
     先出现“我” 再出现“去”
   B 字符集[abc]：多个字符选一个
     如：我[去草] 可以匹配两个序列：我去  我草
     [a-d]:表示匹配 a b c d 某个字符    
     预定义字符集(缩写字符集)
     \d: [0-9] 也就是 0到9 的某一个数字字符
     \w: [a-zA-Z0-9_] 一个单词字符 
     \s: 一个空白字符：回车 换行 tab 空格
     . : 表示任意字符
     如：我\s[去草] 
     \D: 非数字
     \W: 非单词字符
     \S: 非空白
   
   C 数量词：约束字符出现的次数。
     {n,m} n表示最少次数，最多次数
     {n} 表示一定的次数
     {,m} 最多m次
     {n,} 最少n次
     如： 我.{0,1}[去草]  
     缩写数词：? + *
     ? ：{0,1} 没有或有一个
     * : {0,}  0个以上
     + : {1,}  1个以上
     
   D 转义：对于匹配语法字符需要转义
     如: . 表示任意字符，使用 \. 匹配“点”
       { 表示数词语法符合，使用 \{ 匹配 “{”
       \ 是转义字符，使用 \\ 匹配 "\"
       
   举例：写出IP的规则: 192.168.0.34
     \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3} 
     (\d{1,3}\.)(\d{1,3}\.)(\d{1,3}\.)\d{1,3} 
   
   E 分组()，或关系
   如：利用分组简化IP规则：
     (\d{1,3}\.){3}\d{1,3}
     (我[去草])|(我了个去)表示两个序列组或的关系
   
   F 开始与结束
     ^	行的开头
     $	行的结尾
   用于匹配一行文字的开始与结束
   如：邮编规则：一行文本中从开始到结束有6位数字
      ^\d{6}$
      电话规则：一行文本中从开始到结束有11位数字
      ^\d{11}$
   
3 Java String API 提供了正则表达支持
  replaceAll 将正则表达式匹配的字符进行替换
  split 将一个字符串，按照正则匹配的位置劈开
    如：“0,4|0,3|0,5|1,4” 
  matches 检查一个 字符串是否符合正则规则
   如：“0,4|0,3|0,5|1,4” 是否符合
      ^(\d,\d\|){3}\d,\d$
    
  
     
      
     
     
     
     
   
   
   
   
   
   
   
     
       
       
       
   
   
   
   
   
   
   
   
  


       
    
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
 
 
 
 
 