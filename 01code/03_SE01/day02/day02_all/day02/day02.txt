回顾
 Object：是Java的基类，Java所有类默认都继承于Object
  Object是任何类型的父类型。
  
 toString：是返回对象的文本描述。经常被重写。
   toString方法经常被自动回调，如:在字符串
   连接时候，被调用。
 
 equals：是用于比较两个对象是否相等。
   == 只能比较变量的直接值
   基本类型 用 == 比较的是直接值
   引用类型 用 == 比较的是引用的直接值（地址值）
  
  经常被重写
 
 hashCode：要与equals一起重写的方法。 
 
 String 类型：是Java中最重要的类型。
  
  1) 字符串对象是不可改变的。（不变模式）
  2) 内部是一个不可改变的字符数组
  
  3) String还提供了API方法，用于字符串的
   “修改”，查询等
   使用API方便，便捷
   但是：如果用字符数组和for循环等实现的优化算法
   性能会比 String API 好。
   
1 静态字符串的优化现象,静态字符串缓冲池
    目的：性能优化！减少字符串对象的创建
    1) 字符串字面量和常量称为“静态字符串”
    2) 字面量和常量的连接在编译期间执行，
      优化为一个静态字符串
    3) 在运行期间，Java在静态缓冲池中创建
    静态字符串，并且尽量使用同一个字符串对象。
    4) 动态字符串：字符串运算结果，或者连接结果
    或者 new运算创建的字符串，等运行期间创建的字符串
    不参与静态优化

2 "正则"表达式: 是字符串规则定义
   1) 字符串规则(规律)：
      如: 邮政编码是有规律的
       手机号码是有规律的
       电话号码是有规律的
       身份证号是有规律的
       “国骂”是有规律的
   2) 正则表达式:就是用来定义字符顺序规律的
   经常用于字符串内容的查找：
   比如：查找一段文字中在那些地方出现了“国骂”
   3) 正则表达式语法：
   A 字符序列：
     如：我去  我草
     这就是最简单的正则规则，表示：有两个字符
     先出现“我” 再出现“去”
   B 字符集[abc]：多个字符选一个
     如：我[去草] 可以匹配两个序列：我去  我草
     [a-d]:表示匹配 a b c d 某个字符    
     预定义字符集(缩写字符集)
     \d: [0-9] 也就是 0到9 的某一个数字字符
     \w: [a-zA-Z0-9_] 一个单词字符 
     \s: 一个空白字符：回车 换行 tab 空格
     . : 表示任意字符
     如：我\s[去草] 
     \D: 非数字
     \W: 非单词字符
     \S: 非空白
   
   C 数量词：约束字符出现的次数。
     {n,m} n表示最少次数，最多次数
     {n} 表示一定的次数
     {,m} 最多m次
     {n,} 最少n次
     如： 我.{0,1}[去草]  
     缩写数词：? + *
     ? ：{0,1} 没有或有一个
     * : {0,}  0个以上
     + : {1,}  1个以上
     
   D 转义：对于匹配语法字符需要转义
     如: . 表示任意字符，使用 \. 匹配“点”
       { 表示数词语法符合，使用 \{ 匹配 “{”
       \ 是转义字符，使用 \\ 匹配 "\"
       
   举例：写出IP的规则: 192.168.0.34
     \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3} 
     (\d{1,3}\.)(\d{1,3}\.)(\d{1,3}\.)\d{1,3} 
   
   E 分组()，或关系
   如：利用分组简化IP规则：
     (\d{1,3}\.){3}\d{1,3}
     (我[去草])|(我了个去)表示两个序列组或的关系
   
   F 开始与结束
     ^	行的开头
     $	行的结尾
   用于匹配一行文字的开始与结束
   如：邮编规则：一行文本中从开始到结束有6位数字
      ^\d{6}$
      电话规则：一行文本中从开始到结束有11位数字
      ^\d{11}$
   
3 Java String API 提供了正则表达支持
  replaceAll 将正则表达式匹配的字符进行替换
  split 将一个字符串，按照正则匹配的位置劈开
    如：“0,4|0,3|0,5|1,4” 
  matches 检查一个 字符串是否符合正则规则
   如：“0,4|0,3|0,5|1,4” 是否符合
      ^(\d,\d\|){3}\d,\d$
    
4 更详细的正则规则请参考：java.util.regex.Pattern  
5 更详细字符串API 参考 String 类
 
6 StringBuilder 可变字符串
  1) String 的对象是不可改变的，本质上String
    内部的字符数组（数据）不可改变
  2) StringBuilder 的内部也封装了一个字符数组
   这个数组的内容可以改变，甚至会自动扩容。
   如果改变了StringBuilder对象的内容，实际上
   是改变数组内容做到的。
  3) StringBuilder 提供的API都是用于改变内部
  字符数组内容
   API: 都是用于对内部数组进行 “增删改查” 的
   增：
   append 在字符数组尾部追加内容
   insert 在字符数组中间插入内容
  删：
   delete
  改： 
   replace
   reverse 翻转前后顺序
  查：
   length
   indexOf
   substring 
  API:有一个特点:返回自身的引用，适合链写
  
  4) String VS StringBuilder
   A String 是不可改变的，运算时候会经常
    创建新String对象，消耗内存多，性能不佳
    Java的基本数据输出都是String类型
   B StringBuilder 是可变字符串，运算时候
   可以尽量减少新对象的创建，运算性能好。
   C 一般情形：如果需要大量动态处理字符数据
   采用StringBuilder，处理完毕转化为String
   输出。
   
  5) 如果需要极致性能的字符串处理，可以自己
  利用“字符数组”实现优化的算法。不常见！
  
  6) 关于字符串连接的性能问题
   A Java中字符串连接的底层是使用StringBuilder
   实现的。
   如： String s1 = "abc";
      String s2 = "def"
      String s3 = s1+s2;
      //String s3 = new StringBuilder(s1)
      //              .append(s2).toString();
      //产生了两个对象 StringBuilder("abcdef")
      //              String("abcdef") 
  
  再如： String s3 = s1+s2+s2+s2;
      //String s3 = new StringBuilder(s1)
      //              .append(s2)..append(s2)
      //              .append(s2).toString();
  
   B 反复进行的字符串连接有性能问题
     String s1 = "abc"
     s = s+"a";
     //s = new StringBuilder(s)
     //     .append("a").toString();
     s = s+"a";
     //s = new StringBuilder(s)
     //     .append("a").toString();
     建议优化为(只有一个StringBuilder对象)：
     StringBuilder buf=new StringBuilder("abc");
     buf.append("a");
     buf.append("a");
     String s = buf.toString();
     
  7) StringBuilder 和 StringBuffer
    这两个API 类 基本一样，（方法，内部结构）
    它们在线程并发访问时候有差别（并发在线程讲解）
   A StringBuilder(新) 非线程安全，建议单线程使用
   B StringBuffer(旧) 线程安全，可以并发访问
   C StringBuilder 性能稍快

7 时间API 
  1) Java中时间是一个毫秒数。

 时间的数字意义:
     2014年3月19日 15点47分
     2014：是从元年到现在经历了2014个年时间
     3 月：从2014年元旦到现在经历了3个月
     19 日：是本月初到现在经过了19天
     ...
   给你一个毫秒数据(1970元旦)
   如何计算出 年 月 日 时分秒？
   年份：要从1970年开始准确的按照平闰年扣除年份的
    个数 + 1970 就是公元年份
    
  2) Java Date 类型提供了便捷的时间计算方法
  3) SimpleDateFormat 类提供了便捷的日期格式输出
    使用我需要使用日期格式：
      yy 表示2位数年份
      yyyy 表示4位年份
      MM 3位数月份
      dd 2位数日期
      HH 24小时时间
      hh 12小时时间
      mm 分钟
      ss 秒 
    如一个完整的格式： yyyy-MM-dd HH:mm:ss
    就可以便捷的得到一个如 : “2014-03-15 13:20:05”
   
  4) 时间的计算原理：是毫秒数的+、-
    A 简单时间计算, 直接使用毫秒数计算
      如：5天以后。
    B 复杂时间计算，要使用Calendar（日历） API
      如：5个月以后
  
  5) Calendar 类 日历，历法
   A Calendar 是抽象类，不能直接实例化
   B Java 提供了 GregorianCalendar (格力高历)
    就是公元历法，是具体的公元历法。
   C 可以使用 两种办法创建  Calendar 实例
     1 new GregorianCalendar()
     2 Calendar.getInstance() 工厂方法
       getInstance会自动根据地区生产日历
          在中国生产  GregorianCalendar()
     3 日历对象的默认时间是当前时间
       （new Date() 默认也是系统当前时间毫秒数）       
   B 可以获取时间的分量（年 月 日 星期 时分秒等）
     用来替代 Date 类型的 getYear() 等方法
    
   C 要是输出Calendar 文本时间格式。
     1 利用getTime() 方法获取Date类型时间
     然后利用SimpleDateFormat 格式化输出
     
   D 如何利用Calendar 计算时间
     1 提供了时间计算方法 add() 
      可以实现在时间分量上进行计算 
      如：可以在时间上增加5个月的时间
   
  6) 时间类型转换
    GMT long <-> Date <-> Calendar 
    可以转换 
    long t = 0;
    Date d = new Date(t);
    d.setTime(t);//将d的时间设置为t时间
    long l = d.getTime();//获取d中的时间 
    
    Calendar cal = Calendar.getInstance();
    Date date = cal.getTime();//cal -> Date
    cal.setTime(date);//将cal修改为date时间
 
 7 案例： 打印本月的日历 
 
 
 
 
 
 
 
 
 
 
    
  
  
  
  
  
  
  
  
  
   
     
     
     
  
     
   
     
   
    
  
  
  
  
  
  
   
      
     
     
     
     
   
   
   
   
   
   
   
     
       
       
       
   
   
   
   
   
   
   
   
  


       
    
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
 
 
 
 
 