Map遍历所有的value

java设计模式
设计模式分为三大类:
创建型模式:单例模式，工厂模式
结构型模式:装饰模式，代理模式
行为型模式:模板模式，迭代器模式


单例模式:
该类在任何时候都只且仅有一个实例。
遇到下列情况会设计为单例模式:
1:该类的实例消耗资源大。
2:该类的实例需要在很多模块间共享。


模板模式
定义一个操作算法过程的骨架，将一部分细节步骤延迟到子类取实现。

java的异常处理机制

java的异常结构中有一个类:Throwable
其派生了两个子类:
Error:通常是系统级别的异常-JVM级别
Exception:程序级别的异常。

Error程序员是无能为力的。

try语句块
语法:
try{
  .... 可能出现异常的代码片段
}
try语句用于发现异常

try语句不能独立出现。其后要跟对catch语句块或finally语句块

catch语句块
语法:
catch(XXXException e){
  解决异常的代码片段
}
catch语句块用于捕获try语句块中出现的异常，并解决该异常。
catch语句块允许写多个。来捕获不同类型的异常。
若try语句块中所有的代码均未出现异常，那么所有的catch语句块会全部忽略。

catch在书写代码时要养成一个好习惯，在最后一个catch中捕获Exception。
catch可以写多次，要注意，由上之下定义的捕获异常种类应该是子类异常在上，父类异常在下。

throw关键字
throw关键字用于将异常主动抛出。
语法:
   throw e;   //e是某个异常的实例
   throw new RuntimeException();

通常下列情况我们需要主动抛出异常:
1:该异常不应在当前代码片段中解决。
2:出现了一个非语法错误，但又不满足业务逻   辑的情况时，我们可以当做异常去处理


throws声明
throws用于在方法声明时声明该方法可能抛出的异常类型。通常该方法中throw哪些异常，就应当在方法中声明该类异常的抛出。

调用有throws声明的方法，那么就必须处理异常。


RuntimeException:
java中的异常分为两大类：
检查异常和非检查异常

检查异常:当代码中抛出了一个检查异常，那么编译器在编译代码时会检查代码是否有处理该异常的代码片段，没有则编译不通过。

非检查异常:编译器不检查该类异常抛出是否有代码处理。
RuntimeException及其子类都是非检查异常。
RuntimeException的子类通常都是在程序中经常出现的异常。

RuntimeException常见子类:
NullPointerException
ClassCastException
ArrayIndexOutOfBoundsException

finally块
finally块可以出现在try语句块后，或者最后一个catch语句块后。finally语句块也只能出现一次。
语法:
finally{
  代码片段
}
finally语句块的特点:
无论try语句块中是否出现异常，finally语句块中的代码都要执行。通常我们用来做程序的收尾操作。

当继承一个类，并重写带有异常抛出声明的方法时我们可以:
1:不处理异常








