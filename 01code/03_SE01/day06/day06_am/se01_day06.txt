Map遍历所有的value

java设计模式
设计模式分为三大类:
创建型模式:单例模式，工厂模式
结构型模式:装饰模式，代理模式
行为型模式:模板模式，迭代器模式


单例模式:
该类在任何时候都只且仅有一个实例。
遇到下列情况会设计为单例模式:
1:该类的实例消耗资源大。
2:该类的实例需要在很多模块间共享。


模板模式
定义一个操作算法过程的骨架，将一部分细节步骤延迟到子类取实现。

java的异常处理机制

java的异常结构中有一个类:Throwable
其派生了两个子类:
Error:通常是系统级别的异常-JVM级别
Exception:程序级别的异常。

Error程序员是无能为力的。

try语句块
语法:
try{
  .... 可能出现异常的代码片段
}
try语句用于发现异常

try语句不能独立出现。其后要跟对catch语句块或finally语句块

catch语句块
语法:
catch(XXXException e){
  解决异常的代码片段
}
catch语句块用于捕获try语句块中出现的异常，并解决该异常。
catch语句块允许写多个。来捕获不同类型的异常。
若try语句块中所有的代码均未出现异常，那么所有的catch语句块会全部忽略。



