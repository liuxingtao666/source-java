=========角色管理=========

1、权限管理
	1）解释
		一个软件在开发时，会涵盖所涉及的全部业务。
		而在使用时，却需要对使用者加以区分，根据其
		身份的不同，允许他使用其中一部分模块。
		那么实现这种按身份区来区别用户访问模块的差别
		的实现手段，称之为权限管理，即给不同的用户
		划分他应该具有的权限，使其只能访问到自己具有
		权限的模块和功能。
	2）权限管理分为2部分
		a、权限设置（*）
			--需要预置每个用户的权限，即它能够访问的
				模块及功能。
			--通常情况下，权限设置包含角色管理和管理员
				（用户）管理。
		b、权限控制（项目总结时提及）
			--初始化模块
				在用户登录时，要判断用户的身份，然后根据
				他能够访问的模块来初始化模块图标。
				大部分软件会实现这一点。
			--初始化按钮
				在用户点击模块图标切换到模块视图时，需要
				根据用户的身份来初始化他可以访问的按钮。
				一部分软件会实现这一点。
			--初始化数据
				在用户做查询操作时，自动的过滤掉该用户
				不具备权限的数据。
				较少的软件会实现这一点。
	3）角色管理
		角色就是用户的身份，给角色分配模块，然后再给
		用户分配角色即可。这样可以简化具有相同身份的
		用户的权限分配。
		角色不是必要的，但是由于可以用来简化分配权限
		的操作，所以往往都是在权限设置时使用角色来
		区分用户的。
	4）管理员管理
		管理员就是系统的用户，可以登录系统。在登录时
		需要判断出该用户具有哪些模块的权限，从而才能
		根据权限动态初始化模块图标。
	
2、查询
	1）与其它模块查询功能的区别
		每一个角色可以对应多个模块，查询出角色及其
		对应的模块之后，希望将模块信息合并起来，在
		一行上显示，即
			2	营业员	资费管理，账务账号，业务账号，账单
		而不是显示成
			2 营业员 资费管理
			2 营业员	账务账号
			2 营业员	业务账号
			2	营业员	账单
		因此需要对查询结果进行处理才能实现。
	2）开发思路
		a、先进行关联查询，将结果中一样的角色合并在
			一起，使用java来实现。
		b、先查询角色，然后遍历角色，针对每一个角色，
			再次查询他对应的所有模块，然后将这组模块
			记录到角色某属性中。
	3）开发步骤
		a、Entity
			--追加角色实体类
			--追加角色VO
		b、DAO
			--追加分页查询方法，针对角色表进行分页
				select * from (
					select i.*,rownum r from role_info i
				) where r<? and r>?
			--追加查询总页数方法，针对角色表进行计算
				select count(*) from role_info
		c、Action
			--参考资费管理action
		d、struts.xml
		e、JSP
			--参考资费管理列表页面
	
3、新增功能
	1）要求
		--打开新增页面时，初始化一组模块的复选框，
			允许给新增的角色选择几个模块
		--保存时，需要将选中的模块，存入角色模块
			中间表中
	2）开发思路
		a、打开新增页面
			需要些Action，在Action中将privileges.xml中
			的所有模块查询出来，发送给页面，用于初始化
			复选框。
		b、新增保存
			--DAO(*)
				增加新增保存的方法，首先要将角色名存入
				角色表，再将选中的模块存入中间表。
			--Action
				输入：Role对象
				输出：无
			--struts.xml
			--JSP