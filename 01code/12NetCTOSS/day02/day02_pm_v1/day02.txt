=======账务账号========
1、需求
	业务账号是NetCTOSS中维护好的用于客户登陆Unix
	服务器的账号，而一个客户可能开通很多个这样的
	业务账号。
	为了便于向客户统一收费，那么提出了一个独立的
	账务账号，该账号与客户的身份证绑定，即与客户
	具有一对一的关系。
	实际上，账务账号与业务账号也是具有关系的，是一
	对多的关系。
	账务账号具有查询、增加、修改、状态维护等功能。
2、表结构（account）
	recommender_id：
		推荐人ID，是当前account表中另一条数据的ID值。
	login_name,login_passwd：
		客户的账号及密码，用于登录自服务系统，不能
		登录NetCTOSS。
	last_login_time,last_login_ip：
		记录客户最后一次登录自服务系统的时间和IP。
3、查询功能
	1）与资费查询的差异
		--账务账号的查询具有搜索功能
		--账务账号分页多出了首页、末页的功能
	2）开发思路
		a、几次请求
			通过地址栏可以访问查询页面，通过搜索按钮
			也可以访问查询页面，实际上通过地址栏的访问
			可以看成是特殊的搜索，其中搜索条件都是空值。
			因此使用一种请求就可以解决这个问题。
		b、分2步完成
			--追加条件，从全部数据中查询出满足条件的
				数据，不考虑分页。
			--在搜索查询的基础上，追加分页。
		c、请求的过程
			-->filter-->struts.xml-->Action-->
			DAO-->DBUtil,Entity-->JSP
	3）开发步骤
		a、Entity
		*b、DAO
			追加带条件的查询方法
		c、Action
			输入：身份证、姓名、登录名、状态
			输出：账务账号的集合 
		d、struts.xml
		*e、JSP