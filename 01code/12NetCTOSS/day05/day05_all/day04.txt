1、客户端验证
	1）身份证校验
		需要完成如下校验：
			--不能为空
			--格式要满足身份证18位的格式
			--从身份证中截取出生日，给生日字段赋值
	2）推荐人校验
		业务解释：
			每个用户在开通账务账号时，可以指定一个推荐
			人，后续电信公司会给推荐人一些优惠。那么
			推荐人是按照id来存储的，即使用recommender_id
			来存储另一条账务账号的ID值。
			在实际页面操作时，营业员并不知道id是多少，
			需要他输入推荐人的身份证号，然后我们根据
			该身份证自动查询对应的账务账号数据，并将
			其中的id作为recommender_id放入表单的hidden
			中，提交并存储。
		开发思路
			需要使用异步的方式，根据输入的推荐人身份证
			来查询出推荐人ID，并将id放入hidden。
			请求过程
				$.post-->filter-->struts.xml-->Action
				-->DAO-->DBUtil,Entity-->回调函数
		开发步骤
			a、DAO
				追加根据身份证查询账务账号的方法
			b、Action
				输入：身份证
				输出：Account对象
			c、struts.xml
			*d、JSP
				--校验推荐人身份证格式
				--发异步请求，根据身份证查询推荐人
				--回调函数中，根据返回值，设置hidden
					的值。
	
2、修改功能
	1）打开修改页面
		基本思路
			--打开修改页面的基本思路和打开资费管理的
				修改页面一致
			--修改账务账号页面上有推荐人身份证号的字段，
				该字段在account表中不存在，而表中存储的
				推荐人字段是recommender_id，因此我们
				需要根据recommender_id查询出推荐人身份证
				号，并发送到修改页面默认显示。
		请求过程
			[修改]-->filter-->struts.xml-->Action
			-->DAO-->DBUtil,Entity-->JSP
		开发步骤
			a、Entity
				追加推荐人身份证号属性及get、set方法
			*b、DAO
				--根据ID查询账务账号
				--如果账务账号中有推荐人id，那么根据此id
					再查询出推荐人身份证
			c、Action
				输入：id
				输出：Account对象
			d、struts.xml
			*e、JSP
				使用UI标签回显修改的数据
	2）修改保存
		请求过程
			-->filter-->struts.xml-->Action
			-->DAO-->DBUtil
			-->FindAccountAction-->find_account.jsp
		开发步骤
			a、DAO
				追加修改保存的方法
			b、Action	
				输入：Account对象
				输出：无
			c、struts.xml
			d、JSP
				设置表单
				
3、查看明细
	1）该功能基本上与打开修改页面一致，区别是没有
		保存按钮，并且所有的字段都是只读的。
	2）设置字段只读
		对于单选框、多选框、下拉选没有readonly属性，
		所以不能设置readonly="true"。
		对于这3个框，设置只读的方式为
		disabled="true"。
	3）打开页面的URL
		虽然是点击姓名打开的明细页面，但是由于姓名
		可以重复，不能唯一确定一条数据，因此访问明细
		页面的URL中参数不要传递姓名，只需要传递ID
		即可，即与修改的处理方式一致。				